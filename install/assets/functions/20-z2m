#!/command/with-contenv bash

bootstrap_filesystem() {
    if [ ! -d "${DATA_PATH}" ]; then
        mkdir -p "${DATA_PATH}"
    fi
    if [ $(stat -c %U "${DATA_PATH}") != "${Z2M_USER}" ] ; then chown "${Z2M_USER}":"${Z2M_GROUP}" "${DATA_PATH}" ; fi

    if [ ! -d "${LOG_PATH}" ]; then
        mkdir -p "${LOG_PATH}"
    fi
    if [ $(stat -c %U "${LOG_PATH}") != "${Z2M_USER}" ] ; then chown -R "${Z2M_USER}":"${Z2M_GROUP}" "${LOG_PATH}" ; fi

    case "${LOG_TYPE,,}" in
        file | both)
            create_logrotate z2m "${LOG_PATH}"/"${LOG_FILE}" z2m "${Z2M_USER}" "${Z2M_GROUP}"
        ;;
    esac
}

configure_proxy() {
    if var_false "${ENABLE_NGINX}" || var_false "${ENABLE_FRONTEND}" ; then
        print_warn "Disabling Nginx - Using Z2M Frontend in place server - Be sure to set Authentication!"
            service_stop 10-nginx
    else
        sed -i \
                -e "s|{{FRONTEND_LISTEN_PORT}}|${FRONTEND_LISTEN_PORT}|g" \
            /etc/nginx/sites.available/"${NGINX_SITE_ENABLED}".conf
    fi
}

generate_config() {
    if [ "${SETUP_MODE,,}" = "auto" ]; then
        if [ ! -f "${DATA_PATH}"/"${CONFIG_FILE}" ] ; then
            sudo -u "${Z2M_USER}" touch "${DATA_PATH}"/"${CONFIG_FILE}"
            cat <<EOF | silent sudo -u "${Z2M_USER}" tee -a "${DATA_PATH}"/"${CONFIG_FILE}"
# Z2M Configuration
# First Generated on $(TZ=${TIMEZONE} date +'%Y-%m-%d %H:%M:%S %Z')
EOF

            sanity_var ADAPTER_LOCATION "information on your Zigbee adapter"
            sanity_var MQTT_HOST "mqtt broker hostname"
        fi

        ## Adapter/Coordinator Settings
        if [ -n "${ADAPTER_LOCATION}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .serial.port = env(ADAPTER_LOCATION)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ADAPTER_BAUDRATE}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .serial.baudrate = env(ADAPTER_BAUDRATE)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ADAPTER_DRIVER}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .serial.adapter = env(ADAPTER_DRIVER)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ADAPTER_RTSCTS}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .serial.rtscts = env(ADAPTER_RTSCTS)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ADAPTER_DISABLE_LED}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .serial.disable_led = env(ADAPTER_DISABLE_LED)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        ## MQTT Settings
        if [ -n "${MQTT_TOPIC_BASE}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .mqtt.user = env(MQTT_TOPIC_BASE)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${MQTT_HOST}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .mqtt.server = env(MQTT_HOST)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi


        if [ -n "${MQTT_USER}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .mqtt.user = env(MQTT_USER)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${MQTT_PASS}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .mqtt.password = env(MQTT_PASS)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${MQTT_CLIENT_ID}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .mqtt.client_id = env(MQTT_CLIENT_ID)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        s6-setuidgid "${Z2M_USER}" yq -i    '
                                                .mqtt.reject_unauthorized = env(MQTT_REJECT_UNAUTHORIZED) |
                                                .mqtt.include_device_information = env(MQTT_INCLUDE_DEVICE_INFORMATION) |
                                                .mqtt.keepalive = env(MQTT_KEEPALIVE) |
                                                .mqtt.version = env(MQTT_VERSION) |
                                                .mqtt.force_disable_retain = env(MQTT_FORCE_DISABLE_RETAIN)
                                            ' "${DATA_PATH}"/"${CONFIG_FILE}"


        ## Advanced
        ### Zigbee PAN and Key
        if [ -n "${ZIGBEE_NETWORK_KEY}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.network_key = ['$(echo "${ZIGBEE_NETWORK_KEY}")']
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi


        if [ "$(yq '.advanced.network_key' "${DATA_PATH}"/"${CONFIG_FILE}")" = "null" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.network_key = "GENERATE"
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ZIGBEE_CHANNEL}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.channel = env(ZIGBEE_CHANNEL)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ZIGBEE_TRANSMIT_POWER}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.transmit_power = env(ZIGBEE_TRANSMIT_POWER)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ZIGBEE_EXT_PAN_ID}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.ext_pan_id = ['$(echo "${ZIGBEE_EXT_PAN_ID}")']
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ "$(yq '.advanced.ext_pan_id' "${DATA_PATH}"/"${CONFIG_FILE}")" = "null" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.ext_pan_id = "GENERATE"
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ -n "${ZIGBEE_PAN_ID}" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.pan_id = env(ZIGBEE_PAN_ID)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        if [ "$(yq '.advanced.pan_id' "${DATA_PATH}"/"${CONFIG_FILE}")" = "null" ]; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .advanced.pan_id = "GENERATE"
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        ### Logging
        case "${LOG_TYPE,,}" in
            both)
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .advanced.log_output = ["console","file"]
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            ;;
            console)
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .advanced.log_output = ["console"]
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            ;;
            file)
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .advanced.log_output = ["file"]
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            ;;
            none)
                export LOG_PATH=/dev
                export LOG_FILE=/null
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .advnced.log_output = ["file"]
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            ;;
        esac

        s6-setuidgid "${Z2M_USER}" yq -i        '
                                                    .advanced.log_rotation = false |
                                                    .advanced.log_level = env(LOG_LEVEL) |
                                                    .advanced.log_directory = env(LOG_PATH) |
                                                    .advanced.timestamp_format = env(LOG_TIMESTAMP_FORMAT) |
                                                    .advanced.log_file = env(LOG_FILE)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"

        ## Home Assistant
        if var_true "${ENABLE_HOMEASSISTANT}" ; then
            s6-setuidgid "${Z2M_USER}" yq -i   '
                                                    .homeassistant.discovery_topic = env(HOMEASSISTANT_MQTT_TOPIC_DISCOVERY) |
                                                    .homeassistant.status_topic = env(HOMEASSISTANT_MQTT_TOPIC_STATUS) |
                                                    .homeassistant.legacy_entity_attributes = env(HOMEASSISTANT_LEGACY_ENTITY_ATTRIBUTES) |
                                                    .homeassistant.legacy_triggers = env(HOMEASSISTANT_LEGACY_TRIGGERS)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        else
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    (del .homeassistant)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        ## Frontend - Web Interface
        if var_true "${ENABLE_FRONTEND}" ; then
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    .frontend.host = env(FRONTEND_LISTEN_IP) |
                                                    .frontend.port = env(FRONTEND_LISTEN_PORT)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"

            if [ -n "${FRONTEND_PASS}" ]; then
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .frontend.auth_token = env(FRONTEND_PASS)
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            fi
        else
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    (del .frontend)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        ## OTA
        if var_true "${ENABLE_OTA}" ; then
            s6-setuidgid "${Z2M_USER}" yq -i   '
                                                    .ota.ikea_ota_use_test_url = env(OTA_IKEA_USE_TEST_URL) |
                                                    .ota.homeassistant.update_check_inteval = env(HOMEASSISTANT_MQTT_TOPIC_STATUS) |
                                                    .ota.homeassistant.disable_automatic_update_check = env(OTA_ENABLE_AUTO_UPDATE_CHECK) |
                                                    .ota.homeassistant.update_check_interval = env(OTA_AUTO_UPDATE_CHECK_INTERVAL)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"

            if [ -n "${OTA_OVERRIDE_INDEX_FILE}" ]; then
                s6-setuidgid "${Z2M_USER}" yq -i    '
                                                        .ota.zigbee_ota_override_index_location = env(OTA_OVERRIDE_INDEX_FILE)
                                                    ' "${DATA_PATH}"/"${CONFIG_FILE}"
            fi
        else
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    (del .ota)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi

        s6-setuidgid "${Z2M_USER}" yq -i    '
                                                .permit_join = '$(echo "${PERMIT_JOIN,,}")'
                                            ' "${DATA_PATH}"/"${CONFIG_FILE}"

        fi

        ## Device Availability
        if var_true "${ENABLE_DEVICE_AVAILABILITY}" ; then
            s6-setuidgid "${Z2M_USER}" yq -i   '
                                                    .availability.active.timeout = env(DEVICE_AVAILABILITY_ACTIVE_TIMEOUT) |
                                                    .availability.passive.timeout = env(DEVICE_AVAILABILITY_PASSIVE_TIMEOUT)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"

        else
            s6-setuidgid "${Z2M_USER}" yq -i    '
                                                    (del .availability)
                                                ' "${DATA_PATH}"/"${CONFIG_FILE}"
        fi
}
